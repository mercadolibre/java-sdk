/*
 * MELI Markeplace SDK
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package meli_marketplace_lib;

import meli.ApiCallback;
import meli.ApiClient;
import meli.ApiException;
import meli.ApiResponse;
import meli.Configuration;
import meli.Pair;
import meli.ProgressRequestBody;
import meli.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuth20Api {
    private ApiClient localVarApiClient;

    public OAuth20Api() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuth20Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for auth
     * @param responseType  (required)
     * @param clientId  (required)
     * @param redirectUri  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authCall(String responseType, String clientId, String redirectUri, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authValidateBeforeCall(String responseType, String clientId, String redirectUri, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling auth(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling auth(Async)");
        }
        
        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling auth(Async)");
        }
        

        okhttp3.Call localVarCall = authCall(responseType, clientId, redirectUri, _callback);
        return localVarCall;

    }

    /**
     * Authentication Endpoint
     * 
     * @param responseType  (required)
     * @param clientId  (required)
     * @param redirectUri  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void auth(String responseType, String clientId, String redirectUri) throws ApiException {
        authWithHttpInfo(responseType, clientId, redirectUri);
    }

    /**
     * Authentication Endpoint
     * 
     * @param responseType  (required)
     * @param clientId  (required)
     * @param redirectUri  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authWithHttpInfo(String responseType, String clientId, String redirectUri) throws ApiException {
        okhttp3.Call localVarCall = authValidateBeforeCall(responseType, clientId, redirectUri, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Authentication Endpoint (asynchronously)
     * 
     * @param responseType  (required)
     * @param clientId  (required)
     * @param redirectUri  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAsync(String responseType, String clientId, String redirectUri, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authValidateBeforeCall(responseType, clientId, redirectUri, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getToken
     * @param grantType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param redirectUri  (optional)
     * @param code  (optional)
     * @param refreshToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     * Learn more about user operations provided by this API.
     * @see <a href="http://api.example.com/docs/user-operations/">Request Access Token Documentation</a>
     */
    public okhttp3.Call getTokenCall(String grantType, String clientId, String clientSecret, String redirectUri, String code, String refreshToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, String redirectUri, String code, String refreshToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTokenCall(grantType, clientId, clientSecret, redirectUri, code, refreshToken, _callback);
        return localVarCall;

    }

    /**
     * Request Access Token
     * Partner makes a request to the token endpoint by adding the following parameters described below
     * @param grantType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param redirectUri  (optional)
     * @param code  (optional)
     * @param refreshToken  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     * Learn more about user operations provided by this API.
     * @see <a href="http://api.example.com/docs/user-operations/">Request Access Token Documentation</a>
     */
    public Object getToken(String grantType, String clientId, String clientSecret, String redirectUri, String code, String refreshToken) throws ApiException {
        ApiResponse<Object> localVarResp = getTokenWithHttpInfo(grantType, clientId, clientSecret, redirectUri, code, refreshToken);
        return localVarResp.getData();
    }

    /**
     * Request Access Token
     * Partner makes a request to the token endpoint by adding the following parameters described below
     * @param grantType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param redirectUri  (optional)
     * @param code  (optional)
     * @param refreshToken  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     * Learn more about user operations provided by this API.
     * @see <a href="http://api.example.com/docs/user-operations/">Request Access Token Documentation</a>
     */
    public ApiResponse<Object> getTokenWithHttpInfo(String grantType, String clientId, String clientSecret, String redirectUri, String code, String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = getTokenValidateBeforeCall(grantType, clientId, clientSecret, redirectUri, code, refreshToken, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Access Token (asynchronously)
     * Partner makes a request to the token endpoint by adding the following parameters described below
     * @param grantType  (optional)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param redirectUri  (optional)
     * @param code  (optional)
     * @param refreshToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A User object </td><td>  -  </td></tr>
     </table>
     * Learn more about user operations provided by this API.
     * @see <a href="http://api.example.com/docs/user-operations/">Request Access Token Documentation</a>
     */
    public okhttp3.Call getTokenAsync(String grantType, String clientId, String clientSecret, String redirectUri, String code, String refreshToken, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenValidateBeforeCall(grantType, clientId, clientSecret, redirectUri, code, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
